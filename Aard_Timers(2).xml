<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, November 13, 2015, 9:51 PM -->
<!-- MuClient version 4.96 -->

<!-- Plugin "RepopTimers" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aard_Timers"
   author="Endymion"
   id="4ddb6686c93df2a335eaf877"
   language="Lua"
   purpose="Repop timers.  Set timers.  Edit timers."
   date_written="2015-11-13 21:50:06"
   requires="4.30"
   version="1.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[

-------------------------------------------------------------------------------
                 Aard Timers Help
-------------------------------------------------------------------------------
  This plugin will save and countdown timers.  If you are in an area for 2
repops then a timer will be set with that time.  You can also add your own
timers.  Please see below for the commands available.  If you happen to get
stuck with the aliases disabled, please toggle AFK on/off.

  timer(s) help                     Shows this summary.
  
  timer(s) <small|medium|large>     Change the font size of the timers miniwindow.
  
  report repop                      Report the saved repop time for the current Area.
  
  timer(s) reset                    Deletes *all* Timers and Repop times.
  
  timer(s) add <name> <time>        Add a timer.
                                       You must use the following formats for timer 
                                       length: <ss> or <mm:ss> or <hh:mm:ss>
                                 
  timer(s) <name/#> <time>          Change the saved time for a timer by name or #.
                                       You must use the following formats for timer 
                                       length: <ss> or <mm:ss> or <hh:mm:ss>

  report <name/#> <channel>         Report the timer to a channel.
                                       e.g. report 1 gtell
                                       e.g. report aylor gtell
									   
  report <name/#> tell <player>     Report the timer to a player.
                                       e.g. report 1 tell player
                                       e.g. report aylor tell player
									   
  timer(s) delete <name/#>          Deletes a timer by name or number.
  
  timer(s) nonew                    Stops adding new timers.  Still sync's old timers.
  
  timer(s) restart <name/#>         Restarts a timer.

  timer(s) window                   Toggle the window on/off.  The window will
                                    always load in the visible state.
                                       e.g. timer window									

  timer(s) color1 <colorname>       Change color 1 for notes/messages.
                                       Must be a valid color name.
									   
  timer(s) color2 <colorname>       Change color 2 for brackets.
                                       Must be a valid color name.
									   
  timer(s) sound <file_name>        Sets file name for sound.
                                       Must be a .wav file.
									   
  timer(s) sound remove             Unsets sound file name and removes 30 second warning.
									   
  colornames                        Show all color names.									   
------------------------------------------------------------------------------- 
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Aliases  -->

<aliases>
  <alias
   script="repop"
   match="^repop$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="set_repop"
   match="^repop ([a-zA-Z]+)?\s?([0-9]+)$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="report_repop"
   match="^repo?r?t? repop$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="reset_timers"
   match="^timers? reset$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="set_timer"
   match="^timers? (add)?\s?(\d+|\w+) ([\d+\:]+)$"
   enabled="y"
   regexp="y"
   sequence="101"
   group="aliases"
  >
  </alias>
  <alias
   script="delete_timer"
   match="^timers? delete (\d+|\w+)$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="restart_timer"
   match="^timers? restart (\d+|\w+)$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="resize_timers"
   match="^timers? (small|medium|large|xl)$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="report_timer"
   match="^report (\d+|\w+) ([\w ]+)$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="toggle_window"
   match="^timers? wind?o?w?$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="color_names"
   match="^colornames$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="set_color"
   name="color1"
   match="^timers? color1 (\w+)$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="set_color"
   name="color2"
   match="^timers? color2 (\w+)$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="timer_nonew"
   match="^timers? nonew$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
  <alias
   script="set_sound"
   match="^timers? sound( )?(.+)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   group="aliases"
  >
  </alias>
</aliases>

<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="^timers? help$"
   regexp="y"
   enabled="y"
  >
  </alias>
</aliases>

<!-- Triggers -->

<triggers>
   <trigger
   enabled="y"
   match="^\s?Remember to turn off aliases in your client to avoid spam in your post\!$"
   regexp="y"
   script="disable_aliases"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^\s?You are back in the game\.$|^\s?Returning to game[\.]+$"
   regexp="y"
   script="enable_aliases"
   sequence="100"
  >
  </trigger>
</triggers>

<script>
<![CDATA[
require "serialize"
require "tprint"
require "movewindow"
require "wait"

local timerwin = "win"..GetPluginID()
local current_area = ""
local mud_one = {}
local mud_two = {}
local mud_repops = {}
local mud_timers = {}
local timer_sounds = {}
local window_visible = GetVariable("window_visible") or "true"
local report_chan = GetVariable("report_chan") or "gtell"
local pos_x = GetVariable("pos_x") or 100
local pos_y = GetVariable("pos_y") or 100
local line_height
local num_line_height
local font_size
local left_start
local title_height
local color1 = GetVariable("color1") or "yellow"
local color2 = GetVariable("color2") or "cyan"
local nonew = GetVariable("nonew") or "false"
local sound = GetVariable("sound") or ""
local timers_size = GetVariable("timers_size") or "small"
local win_width -- = GetVariable("win_width") or 208
local win_height -- = GetVariable("win_height") or 200
local moving = false

function set_sound(name, line, args)
	if args[2] == "remove" then
		sound = ""
		ColourNote(color1, "", "\n  Timer 30 second warning has been removed!")
		SetVariable("sound", "")
	elseif args[2] ~= "" then
		local snd = string.gsub(args[2], "\\", "\\\\")
		local f = io.open(snd, "r")
		if not f then
			ColourNote(color1, "", "  Invalid sound file name!")
			return
		end
		sound = snd
		SetVariable("sound", sound)
		ColourNote(color1, "", "\n  Timer 30 second warning sound set to: ", color2, "", sound)
		SaveState()
	elseif sound and sound ~= "" then
		ColourNote(color1, "", "\n  Timer 30 second warning sound set to: ", color2, "", sound)
	else
		ColourNote(color1, "", "\n  You have not set a sound for the 30 second warning!")
	end
end

function timer_nonew(name, line, args)
	if nonew == "false" then
		ColourNote(color1, "", "\n  New repop timers are disabled!  Old timers will still re-sync.")
		nonew = "true"
	else
		ColourNote(color1, "", "\n  New repop timers are enabled!")
		nonew = "false"
	end
	SetVariable("nonew", nonew)
	SaveState()
end

function toggle_window(name, line, args)
	if window_visible == "true" then
		window_visible = "false"
	else
		window_visible = "true"
	end
end

function color_names(name, line, args)
	world.Debug "colours"
end

function set_color(name, line, args)
	if name == "color1" then
		color1 = args[1]
		SetVariable("color1", color1)
		ColourNote(color1, "", "  Color1 set to "..color1..".")
	elseif name == "color2" then
		color2 = args[1]
		SetVariable("color2", color2)
		ColourNote(color2, "", "  Color2 set to "..color2..".")
	end
	SaveState()
end

function disable_aliases(name, line, args)
	EnableAliasGroup("aliases", false)
end

function enable_aliases(name, line, args)
	EnableAliasGroup("aliases", true)
end

function set_sizes()
	if timers_size == "small" then
		win_width = 168
		line_height = 16
		num_line_height = 2
		font_size = 10
		left_start = 22
		title_height = 20
	elseif timers_size == "medium" then
		win_width = 208
		line_height = 20
		num_line_height = 3
		font_size = 12
		left_start = 24
		title_height = 24
	elseif timers_size == "large" then
		win_width = 252
		line_height = 24
		num_line_height = 2
		font_size = 14
		left_start = 26
		title_height = 28
	elseif timers_size == "xl" then
		win_width = 272
		line_height = 26
		num_line_height = 2
		font_size = 16
		left_start = 28
		title_height = 30
	end
end

local pvar = GetVariable("mud_timers") or ""
if pvar ~= "" then
	mud_timers = loadstring("return "..pvar)()
	for a, v in pairs(mud_timers) do
		Note("Adding timer for "..a.."  "..v)
		local hours, minutes, seconds
		local total_seconds = tonumber(v)
		if total_seconds > 60 * 60 then -- hours
			hours = math.floor(total_seconds / 60 / 60)
		else
			hours = 0
		end
		if total_seconds > 60 then -- minutes
			minutes =  math.floor((total_seconds - (60 * 60 * hours)) / 60)
		else
			minutes = 0
		end
		seconds = math.floor(total_seconds - (60 * 60 * hours) - (60 * minutes))
		
		rslt = AddTimer(a, hours, minutes, seconds, "", 1025, "")
		SetTimerOption(a, "group", "timers")
	end
else
	--Note("No repop timers to load.")
end

local pvar = GetVariable("mud_repops") or ""
if pvar ~= "" then
	mud_repops = loadstring("return "..pvar)()
else
	--Note("No repops to load.")
end

local pvar = GetVariable("my_timers") or ""
if (pvar) and (pvar ~= "") then
	my_timers = loadstring("return "..pvar)()
else
	--Note("No my-timers to load.")
end

function get_room_area()
	any, zn = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "room.info.zone")
	return zn
end

function string:split(sep) -- http://lua-users.org/wiki/SplitJoin
	local sep, fields = sep or ":", {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end

function resize_timers(name, line, args)
	timers_size = args[1]
	set_sizes()
	SetVariable("timers_size", timers_size)
	SaveState()
end

function set_timer(name, line, args)
	local add = args[1]
	local tnum = tonumber(args[2])
	local area = ""
	if tnum == nil then
		area = string.sub(args[2], 1, 10)
	end
	local tstr = args[3]
	hms = tstr:split(":")
	local secs = 0
	if table.getn(hms) == 3 then
		secs = (tonumber(hms[1]) * 60 * 60) + (tonumber(hms[2]) * 60) + (tonumber(hms[3]))
	elseif table.getn(hms) == 2 then
		secs = (tonumber(hms[1]) * 60) + (tonumber(hms[2]))
	elseif table.getn(hms) == 1 then
		secs = (tonumber(hms[1]))
	else
		ColourNote(color1, "", "  Invalid time given.")
		return
	end
	local fnd = false
	if add ~= "add" then
		if area == "" then
			local tmr = 0
			for a, t in pairs(mud_timers) do
				tmr = tmr + 1
				if tmr == tnum then
					fnd = true
					area = a
				end
			end
		else
			local tmr = 0
			for a, t in pairs(mud_timers) do
				tmr = tmr + 1
				if a == area then
					fnd = true
					tnum = tmr
				end
			end
		end

		if area ~= "" and fnd == true then
			ColourNote(color1, "", "\n  Setting timer # "..tnum, color2, "", " [", color1, "", area, color2, "", "]", color1, "", " to "..secs.." seconds ", color2, "", "[", color1, "", tstr, color2, "", "]", color1, "", ".\n")
			update_timer(area, secs)
		else
			ColourNote(color1, "", "  Timer ", color2, "", "[", color1, "", args[2], color2, "", "]", color1, "", " not found!")
		end
	else
		if area ~= "" then
			ColourNote(color1, "", "\n  Adding ", color2, "", "[", color1, "", area, color2, "", "]", color1, "", " timer set to "..secs.." seconds ", color2, "", "[", color1, "", tstr, color2, "", "]", color1, "", ".\n")
			update_timer(area, secs)
		else
			ColourNote(color1, "", "  Invalid timer name ", color2, "", "[", color1, "", color1, "", args[2], color2, "", "]", color1, "", "!")
		end
	end
end

function report_timer(name, line, args)
	local timer = args[1]
	local chan = args[2]
	local area
	if tonumber(timer) then
		local tmr = 0
		for a, t in pairs(mud_timers) do
			tmr = tmr + 1
			if tmr == tonumber(timer) then
				fnd = true
				area = a
			end
		end
	else
		area = args[1]
	end
		
	local hours, minutes, seconds
	local total_seconds = GetTimerInfo(area, 13) or nil
	if total_seconds == nil then
		ColourNote(color1, "", "  Timer ", color2, "", "[", color1, "", area, color2, "", "]", color1, "", " not found!")
		return
	end
	if total_seconds > 60 * 60 then -- hours
		hours = math.floor(total_seconds / 60 / 60)
	else
		hours = 0
	end
	if total_seconds > 60 then -- minutes
		minutes =  math.floor((total_seconds - (60 * 60 * hours)) / 60)
	else
		minutes = 0
	end
	seconds = math.floor(total_seconds - (60 * 60 * hours) - (60 * minutes))
	
	Execute(chan.." :: ".."Reporting repop estimate for ["..area.."] = ["..string.format("%02d:%02d:%02d", hours, minutes, seconds).."]")
end

function restart_timer(name, line, args)
	local tnum = tonumber(args[1])
	local area = ""
	if tnum == nil then
		area = args[1]
	end
	if area == "" then
		local tmr = 0
		for a, t in pairs(mud_timers) do
			tmr = tmr + 1
			if tmr == tnum then
				area = a
			end
		end
	end
	start_timer("Restarting", area)
end

function start_timer(action, area)
	local hours, minutes, seconds
	local total_seconds = tonumber(mud_timers[area])
	if total_seconds == nil then
		ColourNote(color1, "", "  Timer ", color2, "", "[", color1, "", area, color2, "", "]", color1, "", " not found!")
		return
	end
	if total_seconds > 60 * 60 then -- hours
		hours = math.floor(total_seconds / 60 / 60)
	else
		hours = 0
	end
	if total_seconds > 60 then -- minutes
		minutes =  math.floor((total_seconds - (60 * 60 * hours)) / 60)
	else
		minutes = 0
	end
	seconds = math.floor(total_seconds - (60 * 60 * hours) - (60 * minutes))
	ColourNote(color1, "", "  "..action, color2, "", " [", color1, "", area, color2, "", "]", color1, "", " timer ", color2, "", "[", color1, "", string.format("%02d:%02d:%02d", hours, minutes, seconds), color2, "", "]", color1, "", ".")
	rslt = AddTimer(area, hours, minutes, seconds, "", 1025, "")
	SetTimerOption(area, "group", "timers")
end

function delete_timer(name, line, args)
	local tnum = tonumber(args[1])
	local area = ""
	if tnum == nil then
		area = args[1]
	else
		local tmr = 0
		for a, t in pairs(mud_timers) do
			tmr = tmr + 1
			if tmr == tnum then
				area = a
				break
			end
		end
	end
	local tmr = 0
	for a, t in pairs(mud_timers) do
		tmr = tmr + 1
		if a == area then
			tnum = tmr
		end
	end
	if tnum ~= nil and mud_timers[area] then
		rslt = DeleteTimer(area)
		mud_timers[area] = nil
		ColourNote(color1, "", "\n  Deleted ", color2, "", "[", color1, "", tnum, color2, "", "] [", color1, "", area, color2, "", "]", color1, "", " timer.\n")
	else
		ColourNote(color1, "", "  Invalid timer ", color2, "", "[", color1, "", args[1], color2, "", "]", color1, "", "!")
	end
	SetVariable("mud_timers", serialize.save_simple(mud_timers))
	SaveState()
end

function set_repop(name, line, args)
	local area = args[1] or ""
	local mins = args[2]
	if area == "" then
		area = get_room_area()
	end
end

function update_timer(area, val)
	mud_timers[area] = val
	SetVariable("mud_timers", serialize.save_simple(mud_timers))
	rslt = DeleteTimer(area)
	local hours, minutes, seconds
	local total_seconds = tonumber(val)
	if total_seconds > 60 * 60 then -- hours
		hours = math.floor(total_seconds / 60 / 60)
	else
		hours = 0
	end
	if total_seconds > 60 then -- minutes
		minutes = math.floor((total_seconds - (60 * 60 * hours)) / 60)
	else
		minutes = 0
	end
	seconds = math.floor(total_seconds - (60 * 60 * hours) - (60 * minutes))
	rslt = AddTimer(area, hours, minutes, seconds, "", 1025, "")
	SetTimerOption(area, "group", "timers")
	SaveState()
end

function reset_timers(name, line, args)
	mud_timers = {}
	mud_repops = {}
	SetVariable("mud_repops", "")
	SetVariable("mud_timers", "")
	DeleteTimerGroup("timers")
	SaveState()
	ColourNote(color1, "", "\n  All timers deleted!")
end

function report_repop(name, line, args)
	local area = get_room_area()
	local repop = mud_repops[area]
	if (repop) then
		update_timer(area, repop)
		ColourNote(color1, "", "\n  Repop for ", color2, "", "[", color1, "", area, color2, "", "]", color1, "", " set to ", color2, "", "[", color1, "", repop.." seconds", color2, "", "]", color1, "", ".")
	else
		ColourNote(color1, "", "\n  No repop recorded for: "..area)
	end
end

function OnPluginBroadcast (msg, id, name, text)
	if id == "3e7dedbe37e44942dd46d264" then
		if text == "comm.repop" then
			repop()
		elseif text == "room.info" then
			local area = get_room_area()
			if current_area ~= area then
				mud_one[area] = ""
				mud_two[area] = ""
			end
			current_area = area
		end
	end
end

function repop()
	local area = get_room_area()
	local fnd = false
	local one = mud_one[area] or ""
	local two = mud_two[area] or ""
	if one == "" then
		mud_one[area] = os.time()
		for a, v in pairs(mud_timers) do
			if a == area then
				start_timer("Synchronizing", area)
			end
		end
	elseif two == "" then
		mud_two[area] = os.time()
		local area = get_room_area()
		local one = mud_one[area]
		local two = mud_two[area]
		mud_one[area] = mud_two[area]
		mud_two[area] = ""
		if one ~= "" and two ~= "" then
			if mud_timers[area] or nonew == "false" then
				local diff = os.difftime(two, one) -- seconds
				mud_repops[area] = diff
				SetVariable("mud_repops", serialize.save_simple(mud_repops))
				report_repop()
			elseif nonew == "true" then
				ColourNote(color1, "", "\n  Nonew is enabled.  Did not add timer for: ", color2, "", area)
			end
		else
			Note("Need 2 repop times to report.")
		end
	end
	SaveState()
end

function timer_window()
	if window_visible == "false" then
		WindowShow(timerwin, false)
		DoAfterSpecial(.5, "timer_window()", 12)
		return
	end
	if moving == true then
		DoAfterSpecial(.2, "timer_window()", 12)
		return
	end
	local cnt = 0
	for _, _ in pairs(mud_timers) do
		cnt = cnt + 1
	end
	win_height = title_height + (cnt * line_height)
	WindowCreate(timerwin, pos_x, pos_y, win_width, win_height, 0, 0, ColourNameToRGB("black"))
	WindowRectOp(timerwin, 1, 1, 1, win_width, win_height, ColourNameToRGB("cyan"), nil)
	WindowPosition(timerwin, pos_x, pos_y, 0, 2)
	WindowSetZOrder(timerwin, 201)
	WindowFont(timerwin, "f1", "Consolas", font_size, false, false, false, false)
	WindowFont(timerwin, "b1", "Consolas", font_size, true, false, false, false)
	WindowFont(timerwin, "p1", "Consolas", font_size, false, false, false, false)
	WindowFont(timerwin, "s1", "Consolas", font_size - 2, false, false, false, false)
	WindowText(timerwin, "b1", "      Aard Timers", 0, 2, 0, 0, ColourNameToRGB("yellow"), false)
	local x, y = left_start, line_height
	local pad, npad
	local cnt = 0
	for a, t in pairs(mud_timers) do
		cnt = cnt + 1
		npad = ""
		for i = 1, 2 - string.len(cnt) do
			npad = npad.." "
		end
		pad = ""
		for i = 1, 12 - string.len(a) do
			pad = pad.." "
		end
		
		local t = GetTimerInfo(a, 13) or "0"
		local hours, minutes, seconds
		local color
		local total_seconds = tonumber(t)
		if total_seconds <= 31 then
			if math.floor(total_seconds) == 30 and not timer_sounds[a] then
				Sound(sound)
				timer_sounds[a] = "done"
			end
			color = "chartreuse"
		else
			timer_sounds[a] = nil
			color = "whitesmoke"
		end
		if total_seconds > 60 * 60 then -- hours
			hours = math.floor(total_seconds / 60 / 60)
		else
			hours = 0
		end
		if total_seconds > 60 then -- minutes
			minutes = math.floor((total_seconds - (60 * 60 * hours)) / 60)
		else
			minutes = 0
		end
		seconds = math.floor(total_seconds - (60 * 60 * hours) - (60 * minutes))
		local disp = string.format("%02d:%02d:%02d", hours, minutes, seconds)
		WindowText(timerwin, "s1", cnt..npad, 5, y + num_line_height, 0, 0, ColourNameToRGB("gray"), false)
		WindowText(timerwin, "f1", a..pad..disp, x, y, 0, 0, ColourNameToRGB(color), false)
		y = y + line_height
	end
	WindowShow(timerwin, true)
	movewindow.install(timerwin, 6, 2, true, nil, {mouseup=MouseUp, mousedown=MouseDown, dragmove=LeftClickOnly, dragrelease=LeftClickOnly})
	movewindow.add_drag_handler (timerwin, 0, 0, 0, win_height)
	if cnt > 0 then
		DoAfterSpecial(.4, "timer_window()", 12)
	else
		DoAfterSpecial(.5, "timer_window()", 12)
	end
end

function MouseDown()
	moving = true
end

function MouseUp()
	moving = false
	pos_x, pos_y = WindowInfo(timerwin, 10), WindowInfo(timerwin, 11)
	SetVariable("pos_x", pos_x)
	SetVariable("pos_y", pos_y)
	SaveState()
end

function OnHelp ()
  ColourNote("orange", "", world.GetPluginInfo(world.GetPluginID(), 3))
end

function OnPluginInstall()
	Note("Repop timer plugin installed.")
end

set_sizes()
timer_window()

ColourNote("yellow", "", "------------------------------------------------------------------")
ColourNote("orange", "", "   Aard timers plugin installed.  Type 'timers help' for info.")
ColourNote("yellow", "", "------------------------------------------------------------------")

]]>
</script> 

</muclient>
